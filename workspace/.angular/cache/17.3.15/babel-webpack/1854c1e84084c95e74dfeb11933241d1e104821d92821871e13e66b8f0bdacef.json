{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/customer.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = a0 => ({\n  \"opacity-50 cursor-not-allowed\": a0\n});\nfunction CustomerFormComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtext(1, \" Name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtext(1, \" Contact information is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtext(1, \" Follow-up date cannot be today, please select a future date \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class CustomerFormComponent {\n  constructor(fb, customerService, route, router) {\n    this.fb = fb;\n    this.customerService = customerService;\n    this.route = route;\n    this.router = router;\n    this.isEditMode = false;\n    this.customerId = null;\n    // Get today's date and format it for the date input\n    const todayDate = new Date();\n    this.today = this.formatDateForInput(todayDate);\n    // Set minimum follow-up date to tomorrow\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    this.minFollowupDate = this.formatDateForInput(tomorrow);\n    // Default next follow-up date is 7 days from now\n    const nextWeek = new Date();\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    this.customerForm = this.fb.group({\n      name: ['', Validators.required],\n      contactInfo: ['', Validators.required],\n      lastVisitDate: [this.today, Validators.required],\n      nextFollowupDate: [this.formatDateForInput(nextWeek), [Validators.required, this.followupDateValidator()]],\n      notes: ['']\n    });\n  }\n  // Format date for input field (YYYY-MM-DD)\n  formatDateForInput(date) {\n    return date.toISOString().split('T')[0];\n  }\n  // Custom validator to ensure follow-up date is not today\n  followupDateValidator() {\n    return control => {\n      const followupDate = new Date(control.value);\n      const today = new Date();\n      // Reset hours, minutes, seconds, and milliseconds for proper date comparison\n      followupDate.setHours(0, 0, 0, 0);\n      today.setHours(0, 0, 0, 0);\n      if (followupDate.getTime() === today.getTime()) {\n        return {\n          followupDateIsToday: true\n        };\n      }\n      return null;\n    };\n  }\n  ngOnInit() {\n    this.customerId = this.route.snapshot.paramMap.get('id');\n    this.isEditMode = !!this.customerId;\n    if (this.isEditMode && this.customerId) {\n      const customer = this.customerService.getCustomerById(this.customerId);\n      if (customer) {\n        this.customerForm.patchValue({\n          name: customer.name,\n          contactInfo: customer.contactInfo,\n          lastVisitDate: this.formatDateForInput(new Date(customer.lastVisitDate)),\n          nextFollowupDate: this.formatDateForInput(new Date(customer.nextFollowupDate)),\n          notes: customer.notes\n        });\n      }\n    }\n  }\n  onSubmit() {\n    if (this.customerForm.invalid) {\n      return;\n    }\n    const formValues = this.customerForm.value;\n    if (this.isEditMode && this.customerId) {\n      this.customerService.updateCustomer({\n        id: this.customerId,\n        ...formValues,\n        lastVisitDate: new Date(formValues.lastVisitDate),\n        nextFollowupDate: new Date(formValues.nextFollowupDate)\n      });\n    } else {\n      this.customerService.addCustomer({\n        ...formValues,\n        lastVisitDate: new Date(formValues.lastVisitDate),\n        nextFollowupDate: new Date(formValues.nextFollowupDate)\n      });\n    }\n    this.router.navigate(['/customers']);\n  }\n  setFollowupDate(days) {\n    const nextDate = new Date();\n    nextDate.setDate(nextDate.getDate() + days);\n    // Format date for input field\n    const formattedDate = this.formatDateForInput(nextDate);\n    this.customerForm.patchValue({\n      nextFollowupDate: formattedDate\n    });\n  }\n  static {\n    this.ɵfac = function CustomerFormComponent_Factory(t) {\n      return new (t || CustomerFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CustomerService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CustomerFormComponent,\n      selectors: [[\"app-customer-form\"]],\n      decls: 49,\n      vars: 12,\n      consts: [[1, \"max-w-3xl\", \"mx-auto\", \"bg-white\", \"shadow\", \"overflow-hidden\", \"sm:rounded-lg\"], [1, \"px-4\", \"py-5\", \"sm:px-6\"], [1, \"text-xl\", \"sm:text-2xl\", \"font-bold\", \"leading-7\", \"text-gray-900\"], [1, \"border-t\", \"border-gray-200\"], [1, \"px-4\", \"py-5\", \"sm:p-6\", 3, \"ngSubmit\", \"formGroup\"], [1, \"grid\", \"grid-cols-1\", \"gap-y-6\", \"gap-x-4\", \"sm:grid-cols-6\"], [1, \"col-span-1\", \"sm:col-span-3\"], [\"for\", \"name\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [1, \"mt-1\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"shadow-sm\", \"focus:ring-blue-500\", \"focus:border-blue-500\", \"block\", \"w-full\", \"text-sm\", \"border-gray-300\", \"rounded-md\"], [\"class\", \"text-red-500 text-xs mt-1\", 4, \"ngIf\"], [\"for\", \"contactInfo\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"type\", \"text\", \"id\", \"contactInfo\", \"formControlName\", \"contactInfo\", 1, \"shadow-sm\", \"focus:ring-blue-500\", \"focus:border-blue-500\", \"block\", \"w-full\", \"text-sm\", \"border-gray-300\", \"rounded-md\"], [\"for\", \"lastVisitDate\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"type\", \"date\", \"id\", \"lastVisitDate\", \"formControlName\", \"lastVisitDate\", 1, \"shadow-sm\", \"focus:ring-blue-500\", \"focus:border-blue-500\", \"block\", \"w-full\", \"text-sm\", \"border-gray-300\", \"rounded-md\", 3, \"max\"], [1, \"text-xs\", \"text-gray-500\", \"mt-1\"], [\"for\", \"nextFollowupDate\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"type\", \"date\", \"id\", \"nextFollowupDate\", \"formControlName\", \"nextFollowupDate\", 1, \"shadow-sm\", \"focus:ring-blue-500\", \"focus:border-blue-500\", \"block\", \"w-full\", \"text-sm\", \"border-gray-300\", \"rounded-md\", 3, \"min\"], [1, \"mt-2\", \"flex\", \"flex-wrap\", \"gap-2\"], [\"type\", \"button\", 1, \"inline-flex\", \"items-center\", \"px-2.5\", \"py-1.5\", \"border\", \"border-transparent\", \"text-xs\", \"font-medium\", \"rounded\", \"text-white\", \"bg-blue-600\", \"hover:bg-blue-700\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-offset-2\", \"focus:ring-blue-500\", 3, \"click\"], [\"type\", \"button\", 1, \"inline-flex\", \"items-center\", \"px-2.5\", \"py-1.5\", \"border\", \"border-transparent\", \"text-xs\", \"font-medium\", \"rounded\", \"text-white\", \"bg-green-600\", \"hover:bg-green-700\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-offset-2\", \"focus:ring-green-500\", 3, \"click\"], [\"type\", \"button\", 1, \"inline-flex\", \"items-center\", \"px-2.5\", \"py-1.5\", \"border\", \"border-transparent\", \"text-xs\", \"font-medium\", \"rounded\", \"text-white\", \"bg-purple-600\", \"hover:bg-purple-700\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-offset-2\", \"focus:ring-purple-500\", 3, \"click\"], [1, \"col-span-1\", \"sm:col-span-6\"], [\"for\", \"notes\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"id\", \"notes\", \"formControlName\", \"notes\", \"rows\", \"3\", 1, \"shadow-sm\", \"focus:ring-blue-500\", \"focus:border-blue-500\", \"block\", \"w-full\", \"text-sm\", \"border\", \"border-gray-300\", \"rounded-md\"], [1, \"mt-6\", \"flex\", \"flex-col\", \"sm:flex-row\", \"sm:justify-end\", \"space-y-3\", \"sm:space-y-0\", \"sm:space-x-3\"], [\"type\", \"button\", \"routerLink\", \"/customers\", 1, \"w-full\", \"sm:w-auto\", \"inline-flex\", \"justify-center\", \"items-center\", \"px-4\", \"py-2\", \"border\", \"border-gray-300\", \"shadow-sm\", \"text-sm\", \"font-medium\", \"rounded-md\", \"text-gray-700\", \"bg-white\", \"hover:bg-gray-50\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-offset-2\", \"focus:ring-blue-500\"], [\"type\", \"submit\", 1, \"w-full\", \"sm:w-auto\", \"inline-flex\", \"justify-center\", \"py-2\", \"px-4\", \"border\", \"border-transparent\", \"shadow-sm\", \"text-sm\", \"font-medium\", \"rounded-md\", \"text-white\", \"bg-blue-600\", \"hover:bg-blue-700\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-offset-2\", \"focus:ring-blue-500\", 3, \"disabled\", \"ngClass\"], [1, \"text-red-500\", \"text-xs\", \"mt-1\"]],\n      template: function CustomerFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4);\n          i0.ɵɵlistener(\"ngSubmit\", function CustomerFormComponent_Template_form_ngSubmit_5_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6)(8, \"label\", 7);\n          i0.ɵɵtext(9, \"Customer Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"div\", 8);\n          i0.ɵɵelement(11, \"input\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(12, CustomerFormComponent_div_12_Template, 2, 0, \"div\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\", 6)(14, \"label\", 11);\n          i0.ɵɵtext(15, \"Contact Information\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"div\", 8);\n          i0.ɵɵelement(17, \"input\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(18, CustomerFormComponent_div_18_Template, 2, 0, \"div\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 6)(20, \"label\", 13);\n          i0.ɵɵtext(21, \"Last Visit Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"div\", 8);\n          i0.ɵɵelement(23, \"input\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"div\", 15);\n          i0.ɵɵtext(25, \" Default set to today \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(26, \"div\", 6)(27, \"label\", 16);\n          i0.ɵɵtext(28, \"Next Follow-up Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(29, \"div\", 8);\n          i0.ɵɵelement(30, \"input\", 17);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(31, CustomerFormComponent_div_31_Template, 2, 0, \"div\", 10);\n          i0.ɵɵelementStart(32, \"div\", 18)(33, \"button\", 19);\n          i0.ɵɵlistener(\"click\", function CustomerFormComponent_Template_button_click_33_listener() {\n            return ctx.setFollowupDate(7);\n          });\n          i0.ɵɵtext(34, \" +7 Days \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"button\", 20);\n          i0.ɵɵlistener(\"click\", function CustomerFormComponent_Template_button_click_35_listener() {\n            return ctx.setFollowupDate(14);\n          });\n          i0.ɵɵtext(36, \" +14 Days \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(37, \"button\", 21);\n          i0.ɵɵlistener(\"click\", function CustomerFormComponent_Template_button_click_37_listener() {\n            return ctx.setFollowupDate(30);\n          });\n          i0.ɵɵtext(38, \" +1 Month \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(39, \"div\", 22)(40, \"label\", 23);\n          i0.ɵɵtext(41, \"Notes\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(42, \"div\", 8);\n          i0.ɵɵelement(43, \"textarea\", 24);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(44, \"div\", 25)(45, \"button\", 26);\n          i0.ɵɵtext(46, \" Cancel \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(47, \"button\", 27);\n          i0.ɵɵtext(48);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          let tmp_2_0;\n          let tmp_3_0;\n          let tmp_6_0;\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Edit Customer\" : \"Add New Customer\", \" \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.customerForm);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.customerForm.get(\"name\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.customerForm.get(\"name\")) == null ? null : tmp_2_0.touched));\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.customerForm.get(\"contactInfo\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.customerForm.get(\"contactInfo\")) == null ? null : tmp_3_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"max\", ctx.today);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"min\", ctx.minFollowupDate);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", (tmp_6_0 = ctx.customerForm.get(\"nextFollowupDate\")) == null ? null : tmp_6_0.errors == null ? null : tmp_6_0.errors[\"followupDateIsToday\"]);\n          i0.ɵɵadvance(16);\n          i0.ɵɵproperty(\"disabled\", ctx.customerForm.invalid)(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.customerForm.invalid));\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Update\" : \"Save\", \" \");\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.RouterLink],\n      styles: [\"\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImN1c3RvbWVyLWZvcm0uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEIiLCJmaWxlIjoiY3VzdG9tZXItZm9ybS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQ29tcG9uZW50LXNwZWNpZmljIHN0eWxlcyAqLyJdfQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY3VzdG9tZXItZm9ybS9jdXN0b21lci1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCO0FBQzlCLHdTQUF3UyIsInNvdXJjZXNDb250ZW50IjpbIi8qIENvbXBvbmVudC1zcGVjaWZpYyBzdHlsZXMgKi8iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","CustomerFormComponent","constructor","fb","customerService","route","router","isEditMode","customerId","todayDate","Date","today","formatDateForInput","tomorrow","setDate","getDate","minFollowupDate","nextWeek","customerForm","group","name","required","contactInfo","lastVisitDate","nextFollowupDate","followupDateValidator","notes","date","toISOString","split","control","followupDate","value","setHours","getTime","followupDateIsToday","ngOnInit","snapshot","paramMap","get","customer","getCustomerById","patchValue","onSubmit","invalid","formValues","updateCustomer","id","addCustomer","navigate","setFollowupDate","days","nextDate","formattedDate","ɵɵdirectiveInject","i1","FormBuilder","i2","CustomerService","i3","ActivatedRoute","Router","selectors","decls","vars","consts","template","CustomerFormComponent_Template","rf","ctx","ɵɵlistener","CustomerFormComponent_Template_form_ngSubmit_5_listener","ɵɵelement","ɵɵtemplate","CustomerFormComponent_div_12_Template","CustomerFormComponent_div_18_Template","CustomerFormComponent_div_31_Template","CustomerFormComponent_Template_button_click_33_listener","CustomerFormComponent_Template_button_click_35_listener","CustomerFormComponent_Template_button_click_37_listener","ɵɵadvance","ɵɵtextInterpolate1","ɵɵproperty","tmp_2_0","touched","tmp_3_0","tmp_6_0","errors","ɵɵpureFunction1","_c0"],"sources":["/Volumes/LenovoPS8/projects/hide-demo/customer-followup/src/app/customer-form/customer-form.component.ts","/Volumes/LenovoPS8/projects/hide-demo/customer-followup/src/app/customer-form/customer-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CustomerService, Customer } from '../services/customer.service';\n\n@Component({\n  selector: 'app-customer-form',\n  templateUrl: './customer-form.component.html',\n  styleUrls: ['./customer-form.component.css']\n})\nexport class CustomerFormComponent implements OnInit {\n  customerForm: FormGroup;\n  isEditMode = false;\n  customerId: string | null = null;\n  minFollowupDate: string;\n  today: string;\n\n  constructor(\n    private fb: FormBuilder,\n    private customerService: CustomerService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n    // Get today's date and format it for the date input\n    const todayDate = new Date();\n    this.today = this.formatDateForInput(todayDate);\n    \n    // Set minimum follow-up date to tomorrow\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    this.minFollowupDate = this.formatDateForInput(tomorrow);\n    \n    // Default next follow-up date is 7 days from now\n    const nextWeek = new Date();\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    \n    this.customerForm = this.fb.group({\n      name: ['', Validators.required],\n      contactInfo: ['', Validators.required],\n      lastVisitDate: [this.today, Validators.required],\n      nextFollowupDate: [this.formatDateForInput(nextWeek), [Validators.required, this.followupDateValidator()]],\n      notes: ['']\n    });\n  }\n\n  // Format date for input field (YYYY-MM-DD)\n  formatDateForInput(date: Date): string {\n    return date.toISOString().split('T')[0];\n  }\n  \n  // Custom validator to ensure follow-up date is not today\n  followupDateValidator() {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const followupDate = new Date(control.value);\n      const today = new Date();\n      \n      // Reset hours, minutes, seconds, and milliseconds for proper date comparison\n      followupDate.setHours(0, 0, 0, 0);\n      today.setHours(0, 0, 0, 0);\n      \n      if (followupDate.getTime() === today.getTime()) {\n        return { followupDateIsToday: true };\n      }\n      \n      return null;\n    };\n  }\n\n  ngOnInit(): void {\n    this.customerId = this.route.snapshot.paramMap.get('id');\n    this.isEditMode = !!this.customerId;\n    \n    if (this.isEditMode && this.customerId) {\n      const customer = this.customerService.getCustomerById(this.customerId);\n      if (customer) {\n        this.customerForm.patchValue({\n          name: customer.name,\n          contactInfo: customer.contactInfo,\n          lastVisitDate: this.formatDateForInput(new Date(customer.lastVisitDate)),\n          nextFollowupDate: this.formatDateForInput(new Date(customer.nextFollowupDate)),\n          notes: customer.notes\n        });\n      }\n    }\n  }\n\n  onSubmit(): void {\n    if (this.customerForm.invalid) {\n      return;\n    }\n\n    const formValues = this.customerForm.value;\n    \n    if (this.isEditMode && this.customerId) {\n      this.customerService.updateCustomer({\n        id: this.customerId,\n        ...formValues,\n        lastVisitDate: new Date(formValues.lastVisitDate),\n        nextFollowupDate: new Date(formValues.nextFollowupDate)\n      });\n    } else {\n      this.customerService.addCustomer({\n        ...formValues,\n        lastVisitDate: new Date(formValues.lastVisitDate),\n        nextFollowupDate: new Date(formValues.nextFollowupDate)\n      });\n    }\n    \n    this.router.navigate(['/customers']);\n  }\n\n  setFollowupDate(days: number): void {\n    const nextDate = new Date();\n    nextDate.setDate(nextDate.getDate() + days);\n    \n    // Format date for input field\n    const formattedDate = this.formatDateForInput(nextDate);\n    this.customerForm.patchValue({ nextFollowupDate: formattedDate });\n  }\n}","<div class=\"max-w-3xl mx-auto bg-white shadow overflow-hidden sm:rounded-lg\">\n  <div class=\"px-4 py-5 sm:px-6\">\n    <h2 class=\"text-xl sm:text-2xl font-bold leading-7 text-gray-900\">\n      {{ isEditMode ? 'Edit Customer' : 'Add New Customer' }}\n    </h2>\n  </div>\n  \n  <div class=\"border-t border-gray-200\">\n    <form [formGroup]=\"customerForm\" (ngSubmit)=\"onSubmit()\" class=\"px-4 py-5 sm:p-6\">\n      <div class=\"grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6\">\n        <!-- Name Field -->\n        <div class=\"col-span-1 sm:col-span-3\">\n          <label for=\"name\" class=\"block text-sm font-medium text-gray-700\">Customer Name</label>\n          <div class=\"mt-1\">\n            <input type=\"text\" id=\"name\" formControlName=\"name\" class=\"shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full text-sm border-gray-300 rounded-md\">\n          </div>\n          <div *ngIf=\"customerForm.get('name')?.invalid && customerForm.get('name')?.touched\" class=\"text-red-500 text-xs mt-1\">\n            Name is required\n          </div>\n        </div>\n\n        <!-- Contact Info Field -->\n        <div class=\"col-span-1 sm:col-span-3\">\n          <label for=\"contactInfo\" class=\"block text-sm font-medium text-gray-700\">Contact Information</label>\n          <div class=\"mt-1\">\n            <input type=\"text\" id=\"contactInfo\" formControlName=\"contactInfo\" class=\"shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full text-sm border-gray-300 rounded-md\">\n          </div>\n          <div *ngIf=\"customerForm.get('contactInfo')?.invalid && customerForm.get('contactInfo')?.touched\" class=\"text-red-500 text-xs mt-1\">\n            Contact information is required\n          </div>\n        </div>\n\n        <!-- Last Visit Date Field -->\n        <div class=\"col-span-1 sm:col-span-3\">\n          <label for=\"lastVisitDate\" class=\"block text-sm font-medium text-gray-700\">Last Visit Date</label>\n          <div class=\"mt-1\">\n            <input type=\"date\" \n                   id=\"lastVisitDate\" \n                   formControlName=\"lastVisitDate\" \n                   [max]=\"today\"\n                   class=\"shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full text-sm border-gray-300 rounded-md\">\n          </div>\n          <div class=\"text-xs text-gray-500 mt-1\">\n            Default set to today\n          </div>\n        </div>\n\n        <!-- Next Followup Date Field -->\n        <div class=\"col-span-1 sm:col-span-3\">\n          <label for=\"nextFollowupDate\" class=\"block text-sm font-medium text-gray-700\">Next Follow-up Date</label>\n          <div class=\"mt-1\">\n            <input type=\"date\" \n                   id=\"nextFollowupDate\" \n                   formControlName=\"nextFollowupDate\" \n                   [min]=\"minFollowupDate\"\n                   class=\"shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full text-sm border-gray-300 rounded-md\">\n          </div>\n          <div *ngIf=\"customerForm.get('nextFollowupDate')?.errors?.['followupDateIsToday']\" class=\"text-red-500 text-xs mt-1\">\n            Follow-up date cannot be today, please select a future date\n          </div>\n          <div class=\"mt-2 flex flex-wrap gap-2\">\n            <button type=\"button\" (click)=\"setFollowupDate(7)\" class=\"inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">\n              +7 Days\n            </button>\n            <button type=\"button\" (click)=\"setFollowupDate(14)\" class=\"inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500\">\n              +14 Days\n            </button>\n            <button type=\"button\" (click)=\"setFollowupDate(30)\" class=\"inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500\">\n              +1 Month\n            </button>\n          </div>\n        </div>\n\n        <!-- Notes Field -->\n        <div class=\"col-span-1 sm:col-span-6\">\n          <label for=\"notes\" class=\"block text-sm font-medium text-gray-700\">Notes</label>\n          <div class=\"mt-1\">\n            <textarea id=\"notes\" formControlName=\"notes\" rows=\"3\" class=\"shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full text-sm border border-gray-300 rounded-md\"></textarea>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"mt-6 flex flex-col sm:flex-row sm:justify-end space-y-3 sm:space-y-0 sm:space-x-3\">\n        <button type=\"button\" routerLink=\"/customers\" class=\"w-full sm:w-auto inline-flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">\n          Cancel\n        </button>\n        <button type=\"submit\" [disabled]=\"customerForm.invalid\" class=\"w-full sm:w-auto inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\" [ngClass]=\"{'opacity-50 cursor-not-allowed': customerForm.invalid}\">\n          {{ isEditMode ? 'Update' : 'Save' }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}