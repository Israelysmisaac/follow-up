{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CustomerService {\n  constructor() {\n    this.STORAGE_KEY = 'customers';\n    this.customersSubject = new BehaviorSubject([]);\n    this.loadCustomers();\n  }\n  loadCustomers() {\n    const customersJson = localStorage.getItem(this.STORAGE_KEY);\n    if (customersJson) {\n      try {\n        const customers = JSON.parse(customersJson, (key, value) => {\n          // Convert date strings back to Date objects\n          if (key === 'lastVisitDate' || key === 'nextFollowupDate') {\n            return new Date(value);\n          }\n          return value;\n        });\n        this.customersSubject.next(customers);\n      } catch (error) {\n        console.error('Error parsing customers from localStorage', error);\n        this.customersSubject.next([]);\n      }\n    }\n  }\n  saveCustomers(customers) {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(customers));\n    this.customersSubject.next(customers);\n  }\n  getCustomers() {\n    return this.customersSubject.asObservable();\n  }\n  getCustomerById(id) {\n    return this.customersSubject.value.find(customer => customer.id === id);\n  }\n  getTodayFollowups() {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const customers = this.customersSubject.value.filter(customer => {\n      const followupDate = new Date(customer.nextFollowupDate);\n      followupDate.setHours(0, 0, 0, 0);\n      return followupDate.getTime() === today.getTime();\n    });\n    return new BehaviorSubject(customers).asObservable();\n  }\n  addCustomer(customer) {\n    const customers = [...this.customersSubject.value];\n    const newCustomer = {\n      ...customer,\n      id: Date.now().toString()\n    };\n    customers.push(newCustomer);\n    this.saveCustomers(customers);\n  }\n  updateCustomer(customer) {\n    const customers = this.customersSubject.value.map(c => c.id === customer.id ? customer : c);\n    this.saveCustomers(customers);\n  }\n  deleteCustomer(id) {\n    const customers = this.customersSubject.value.filter(c => c.id !== id);\n    this.saveCustomers(customers);\n  }\n  setFollowupDate(customerId, daysLater) {\n    const customers = [...this.customersSubject.value];\n    const customerIndex = customers.findIndex(c => c.id === customerId);\n    if (customerIndex !== -1) {\n      const customer = customers[customerIndex];\n      const nextDate = new Date();\n      nextDate.setDate(nextDate.getDate() + daysLater);\n      customers[customerIndex] = {\n        ...customer,\n        lastVisitDate: new Date(),\n        nextFollowupDate: nextDate\n      };\n      this.saveCustomers(customers);\n    }\n  }\n  static {\n    this.ɵfac = function CustomerService_Factory(t) {\n      return new (t || CustomerService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CustomerService,\n      factory: CustomerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","CustomerService","constructor","STORAGE_KEY","customersSubject","loadCustomers","customersJson","localStorage","getItem","customers","JSON","parse","key","value","Date","next","error","console","saveCustomers","setItem","stringify","getCustomers","asObservable","getCustomerById","id","find","customer","getTodayFollowups","today","setHours","filter","followupDate","nextFollowupDate","getTime","addCustomer","newCustomer","now","toString","push","updateCustomer","map","c","deleteCustomer","setFollowupDate","customerId","daysLater","customerIndex","findIndex","nextDate","setDate","getDate","lastVisitDate","factory","ɵfac","providedIn"],"sources":["/Volumes/LenovoPS8/projects/hide-demo/customer-followup/src/app/services/customer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface Customer {\n  id: string;\n  name: string;\n  contactInfo: string;\n  lastVisitDate: Date;\n  nextFollowupDate: Date;\n  notes: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n  private readonly STORAGE_KEY = 'customers';\n  private customersSubject = new BehaviorSubject<Customer[]>([]);\n  \n  constructor() {\n    this.loadCustomers();\n  }\n\n  private loadCustomers(): void {\n    const customersJson = localStorage.getItem(this.STORAGE_KEY);\n    if (customersJson) {\n      try {\n        const customers = JSON.parse(customersJson, (key, value) => {\n          // Convert date strings back to Date objects\n          if (key === 'lastVisitDate' || key === 'nextFollowupDate') {\n            return new Date(value);\n          }\n          return value;\n        });\n        this.customersSubject.next(customers);\n      } catch (error) {\n        console.error('Error parsing customers from localStorage', error);\n        this.customersSubject.next([]);\n      }\n    }\n  }\n\n  private saveCustomers(customers: Customer[]): void {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(customers));\n    this.customersSubject.next(customers);\n  }\n\n  getCustomers(): Observable<Customer[]> {\n    return this.customersSubject.asObservable();\n  }\n\n  getCustomerById(id: string): Customer | undefined {\n    return this.customersSubject.value.find(customer => customer.id === id);\n  }\n\n  getTodayFollowups(): Observable<Customer[]> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const customers = this.customersSubject.value.filter(customer => {\n      const followupDate = new Date(customer.nextFollowupDate);\n      followupDate.setHours(0, 0, 0, 0);\n      return followupDate.getTime() === today.getTime();\n    });\n    \n    return new BehaviorSubject<Customer[]>(customers).asObservable();\n  }\n\n  addCustomer(customer: Omit<Customer, 'id'>): void {\n    const customers = [...this.customersSubject.value];\n    const newCustomer = {\n      ...customer,\n      id: Date.now().toString(),\n    };\n    \n    customers.push(newCustomer);\n    this.saveCustomers(customers);\n  }\n\n  updateCustomer(customer: Customer): void {\n    const customers = this.customersSubject.value.map(c => \n      c.id === customer.id ? customer : c\n    );\n    this.saveCustomers(customers);\n  }\n\n  deleteCustomer(id: string): void {\n    const customers = this.customersSubject.value.filter(c => c.id !== id);\n    this.saveCustomers(customers);\n  }\n\n  setFollowupDate(customerId: string, daysLater: number): void {\n    const customers = [...this.customersSubject.value];\n    const customerIndex = customers.findIndex(c => c.id === customerId);\n    \n    if (customerIndex !== -1) {\n      const customer = customers[customerIndex];\n      const nextDate = new Date();\n      nextDate.setDate(nextDate.getDate() + daysLater);\n      \n      customers[customerIndex] = {\n        ...customer,\n        lastVisitDate: new Date(),\n        nextFollowupDate: nextDate\n      };\n      \n      this.saveCustomers(customers);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}